This is a data warehouse for Tom's personal life

We start with these data marts.

Terminal commands
    From shell history files
Calendar events
    http://thomaslevine.com/schedule
Facebook messages
    Facebook messages that people have sent me (not messages I have sent)
Facebook chat status changes
    When people go online and offline
Twitter notifications
    When people direct message, follow, &c. me., based on emails from Twitter
GnuCash splits
    Along with their transactions, accounts, &c.
All my emails
    With ordinary email fields
Web logs from Branchable
    HTTP requests for http://thomaslevine.com
Piwik database
    Stuff that Piwik tracks for http://thomaslevine.com
Mutt aliases
    Person and email address

I link the following dimensions quite nicely because there is a clear
one-to-many relationship.

Person
    Real persons are linked to email addresses, Facebook accounts, &c.
Dates
    Dates and datetimes are converted into one thing.

Many-to-many relationships also work; I
`use <http://docs.sqlalchemy.org/en/latest/dialects/postgresql.html#sqlalchemy.dialects.postgresql.array>`_
PostgreSQL's `array type <http://www.postgresql.org/docs/9.1/static/arrays.html>`_.

Fuzzy person
    Real persons are guessed based on IP addresses, names, &c.
Topics
    Whether the fact references a particular topic, probably determined based on the presence of specific URLs and other key words.
Location
    I associate the fact with locations based on time zones, persons, topics, &c.

How to use
=======================================
Install the package. ::

    pip3 install .

Start loading the data. ::

    dada-load

More ideas of sources of data
========================================
Here are some other possible cubes or data sources.

* Git commits
* Project pages (``pip install tlevine``)
* Emails, possibly broken out as
  * Notifications from various services
  * Sent emails
  * Mailing lists
  * Travel bookings
  * ...
* Old calendar (Google Calendar)
* Other Google services, mainly for stuff from years ago
* Text messages
* Meetup.com history

Some tables to create to assist in the creation of these tools

* Unique identifiers for people with links to email addresses, phone
    numbers, &c.
* Cities I've been in, people I stayed with

Structure of the repository
==============================

``doeund``
    A separate package for assembling a model from sqlalchemy
``warehouse/{main,model,logger}.py``
    Overall configuration of the data warehouse
The rest of ``warehouse``
    Connectors to different data sources
``mastering``
    Assemblage of master data

Fun ideas
==============================

* How many spaces after a period?
* Connect website views to emails
* Length of sentences (Saar Golde's idea)
* http://www.pcthompson.co.uk/documents/The_Reverse_Star_Schema_v2.1.pdf

Something like OLAP
==========================================
I couldn't figure out how to install or even buy any OLAP server, so I
just wrote my own thing that I might actually like more.

The difference between fact tables and dimension tables is that fact
tables are the seeds of cubes and dimension tables aren't. With each of
the fact tables, I create views that apply all of the joins, remove
duplicate join keys from the resulting columns, and name the columns
nicely. I name the view with the prefix "cube".


To do
========
In the notmuch importer, figure out how to catch this exception. ::

    terminate called after throwing an instance of 'Xapian::DatabaseModifiedError'

Keep this in mind:
http://gerardnico.com/wiki/data_modeling/snowflake#many-to-many_relationship

Write services that run on my laptop and phone and ping my server periodically.
The server will respond with the location of the client.
Then I can join between datetimes and Tom's location.
This will help:
http://pygeoip.readthedocs.org/en/latest/getting-started.html
